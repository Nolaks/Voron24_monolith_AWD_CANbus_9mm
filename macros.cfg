#####################################################################
#   Macros
#####################################################################

#####################################################################
#   A better print_start macro for v2/trident
#####################################################################
#####################################################################
#   Macros
#####################################################################

#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore (if you have one)
## Z_TILT_ADJUST (For Trident only)
## QUAD_GANTRY_LEVEL (For V2.4 only)
## Beacon Contact logic (if you have one. 4 lines at 4 locations)

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  ##  Uncomment for Beacon Contact (1 of 4 for beacon contact)
  SET_GCODE_OFFSET Z=0                                 # Set offset to 0

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  ##STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    ##STATUS_HEATING                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turn on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                  # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    #STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    G4 P300                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                             # Heat hotend to 150c

  ##  Uncomment for Beacon contact (2 of 4 for beacon contact)
  G28 Z METHOD=CONTACT CALIBRATE=1                     # Calibrate z offset and beacon model

  ##  Uncomment for V2.4 (Quad gantry level AKA QGL)
  #SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  #STATUS_LEVELING                                      # Set LEDs to leveling-mode
  QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  #G28 Z                                                # Home Z again after QGL

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE ADAPTIVE=1                                  # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  ## Uncomment for Beacon Contact (3 of 4 for beacon contact)
  G28 Z METHOD=CONTACT CALIBRATE=0                     # Calibrate z offset only with hot nozzle

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait - 50} Y4 Z15 F9000                      # Go to center of the bed etait  G1 X{x_wait} Y{y_wait}
  M107                                                  # Turn off partcooling fan
  {% set current = printer.extruder.temperature %}
  {% set target = target_extruder|float %}
  {% if current < target - 2 %}
  M109 S{target} ; Wait if too cold (more than 2Â°C below target)
  {% else %}
  M104 S{target} ; Already close enough, just set temp and continue
  {% endif %}


  ##   Uncomment for Beacon Contact (4 of 4 for beacon contact)
  SET_GCODE_OFFSET Z=0.06                              # Add a little offset for hotend thermal expansion

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING                                       # Set LEDs to printing-mode
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90                                                   # Absolute position

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    M106 S0 L0 # this will remove any lock from the Fan macro 
    
    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

###############################
#     Pause/Resume Macros     #
###############################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set extruder_temp = printer['extruder'].target|int %}
    {% set pause_extruder_temp = printer['gcode_macro _PRINTER_VARIABLE'].extruder.pause_temp|default(150)|int %}
    {% set pause_retract_distance = printer["gcode_macro _PRINTER_VARIABLE"].pause_filament_retract_disance|default(1)|int %}
    {% set retract_speed = printer["gcode_macro _PRINTER_VARIABLE"].extruder.retract_speed|default(15)|int %}
    {% set partcooling_speed = printer['fan'].speed*255|default(0)|round %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== PAUSE ====")}
        {action_respond_info("pause: [extruder_temp: '%s', pause_extruder_temp: '%s', partcooling_speed: '%s']" % (extruder_temp,pause_extruder_temp,partcooling_speed))}
        {action_respond_info("retract: [disance: '%s', speed: '%s']" % (pause_retract_distance,retract_speed))}
        {action_respond_info("===============")}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=resume_extruder_temp VALUE='"{extruder_temp}"'
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=partcooling_speed VALUE='"{partcooling_speed}"'
    PAUSE_BASE
    M106 S0
    G91
    G92 E0
    G1 E-{pause_retract_distance} F{retract_speed*60}
    _PARK_SAFE_PAUSE
    M104 S{pause_extruder_temp}
    M106 S0 L0 # this will remove any lock from the Fan macro
    SET_IDLE_TIMEOUT TIMEOUT=43200

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_resume_extruder_temp = 0
variable_partcooling_speed = 0
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set velocity = printer.configfile.config.pause_resume.recover_velocity|default(300)|int %}
    {% set pause_retract_distance = printer["gcode_macro _PRINTER_VARIABLE"].extruder.pause_retract_distance|default(3)|int %}
    {% set unretract_speed = printer["gcode_macro _PRINTER_VARIABLE"].extruder.unretract_speed|default(5)|int %}
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== RESUME ====")}
        {action_respond_info("pause: [velocity: '%s', extruder_temp: '%s', partcooling_speed: '%s']" % (velocity,resume_extruder_temp,partcooling_speed))}
        {action_respond_info("unretract: [disance: '%s', speed: '%s']" % (pause_retract_distance,unretract_speed))}
        {action_respond_info("===============")}
    {% endif %}

    {% if resume_extruder_temp > 0 %}
        M109 S{resume_extruder_temp|int}
        M106 S{partcooling_speed|int}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
        RESTORE_GCODE_STATE NAME=PAUSE_PARK_POSITION MOVE=1 MOVE_SPEED={velocity}
        RESTORE_GCODE_STATE NAME=PAUSE_RAISED_Z MOVE=1 MOVE_SPEED={velocity}
        RESTORE_GCODE_STATE NAME=PAUSE_START MOVE=1 MOVE_SPEED={velocity}
        G91
        M83
        G92 E0
        G1 E{pause_retract_distance} F{unretract_speed*60}
        g92 E0
        RESUME_BASE {get_params}
    {% else %}
        {action_respond_info("ERROR: Resume is missing resume_extruder_temp data")}
    {% endif %}

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x %}
        {% if x_min < 0 %}
            {% set x_min = 0 %}
        {% endif %}
    
        {% set y_min = printer.toolhead.axis_minimum.y %}
        {% if y_min < 0 %}
            {% set y_min = 0 %}
        {% endif %}
    
        {% set x_min = x_min + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = y_min + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

#####################################################################
#  Fan override macro - while printing 
# Will set a minimum fan speed and allow for burst of speed when requested by the Gcode
# It replaces M106 so this means it's more accessible
# If you hit the macro UI with no inputs it default back to the Gcode
# If you choose to use this Macro be sure to add L0 to your first M106 Gcode within your print end / cancel print / and possibly your pause macros. L0 turns off the lock.
#####################################################################


[gcode_macro M106]
rename_existing: M106.1
variable_lock: 0
variable_mlock: 0
variable_gcodecur: 0
gcode:
    {% set S = params.S|default(0)|int %}
    {% set CURLOCK = printer["gcode_macro M106"].lock %}
    {% set MINLOCK = printer["gcode_macro M106"].mlock %}
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=gcodecur VALUE={params.S|default(0)|int}
    {% if 'L' in params %}
        {% set lockset = params.L|default(0)|int %}
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=lock VALUE={params.L|default(0)|int}
        M106.1 S{S}
        {% if lockset == 1 %}
            M118 Fan Locked at Speed Set.
        {% endif %}
        {% if lockset == 2 %}
            SET_GCODE_VARIABLE MACRO=M106 VARIABLE=mlock VALUE={params.S|default(0)|int}
            M118 Fan Min Speed Set.  
        {% endif %}
    {% else %}
        {% if CURLOCK == 0 %}
            M106.1 S{S}
        {% endif %}
        {% if CURLOCK == 1 %}
            RESPOND TYPE=error MSG="FAN LOCKED: HARD SET ({printer.fan.speed*425|round(0)|int})"
        {% endif %}
        {% if CURLOCK == 2 %}
            {% if params.S|int < MINLOCK %}
              RESPOND TYPE=error MSG="FAN LOCKED: MIN SPEED ({MINLOCK})"
              M106.1 S{MINLOCK}
            {% else %} 
              M106.1 S{S}
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro Fan_Lock]
#Provides UI based Fan_Lock Control
description: Lock: 1 = Constant 2 = Min | Speed 0-255 | No Input = GCode Resume 
gcode:
    {% set LockType = params.LOCK|default(0)|int %}
    {% set SpeedSet = params.SPEED|default(0)|int %}
    {% if not params.LOCK and not params.SPEED %}
        {% set GCResume = printer["gcode_macro M106"].gcodecur|default(0)|int %}
        M106 L0 S{GCResume}
        M118 Resuming GCode Based Fan Speed
    {% else %}
        {% if LockType|int < 3 and SpeedSet|int < 256 %}
            M106 S{SpeedSet} L{LockType}
        {% else %}
            RESPOND TYPE=error MSG="Invalid Options for Fan Lock (Lock = 1 Hard Set, 2 Min Set) (Speed = <255) (Nothing Defined = GCode Based Resume)"
        {% endif %}
    {% endif %}
    